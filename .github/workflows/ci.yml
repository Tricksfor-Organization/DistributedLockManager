name: CI

on:
  push:
    # run on pushes to any branch and on tag pushes matching v*.*.*
    branches: ['**']
    tags: ['v*.*.*']
  pull_request:
    # run on PRs targeting any branch
    branches: ['**']
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build:
    name: Build and Pack
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

      - name: Restore
        run: dotnet restore src/DistributedLockManager/DistributedLockManager.csproj

      - name: Build
        run: dotnet build src/DistributedLockManager/DistributedLockManager.csproj --configuration Release --no-restore

      - name: Run tests (if any)
        run: |
          set -e
          # run tests only if test projects exist
          if ls **/*Tests/*.csproj 1> /dev/null 2>&1; then
            dotnet test --no-build --verbosity normal
          else
            echo "No test projects found. Skipping tests."
          fi

      - name: Compute package version from release tag
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          # Use the release tag as the package version. Strip a leading 'v' if present.
          tag="${{ github.event.release.tag_name }}"
          if [[ "$tag" == v* ]]; then
            tag="${tag#v}"
          fi
          echo "Computed PACKAGE_VERSION=$tag"
          echo "PACKAGE_VERSION=$tag" >> $GITHUB_ENV

      - name: Pack
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          # If PACKAGE_VERSION is set (from a release tag), pass it to dotnet pack so the nupkg gets the release version.
          if [ -n "${PACKAGE_VERSION:-}" ]; then
            echo "Packing with version $PACKAGE_VERSION"
            dotnet pack src/DistributedLockManager/DistributedLockManager.csproj -c Release -o ./nupkgs --no-build --include-symbols --include-source /p:PackageVersion=$PACKAGE_VERSION
          else
            dotnet pack src/DistributedLockManager/DistributedLockManager.csproj -c Release -o ./nupkgs --no-build --include-symbols --include-source
          fi

      - name: Publish NuGet package
        if: github.event_name == 'release' && github.event.action == 'published'
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          echo "Publishing packages found in ./nupkgs"
          ls -la ./nupkgs || true
          dotnet nuget push ./nupkgs/*.nupkg -k $NUGET_API_KEY -s https://api.nuget.org/v3/index.json --skip-duplicate
